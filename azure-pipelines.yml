trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: mottuflow-secrets
  - name: RESOURCE_GROUP
    value: "sprint-mottuflow"
  - name: WEBAPP_NAME
    value: "mottuflow-app"
  - name: APP_PLAN
    value: "mottuflow-plan"
  - name: LOCATION
    value: "brazilsouth"
  - name: ACI_NAME
    value: "mottuflow-db"
  - name: CONTAINER_IMAGE
    value: "mysql:8.0.34"

stages:

# --------------------- Build ---------------------
- stage: Build
  displayName: "Build"
  jobs:
    - job: BuildApp
      container: maven:3.9.11-eclipse-temurin-21-noble
      steps:
        - checkout: self

        - task: Maven@4
          displayName: "Build Maven"
          inputs:
            mavenPomFile: "MottuFlow/pom.xml"
            goals: "clean package -DskipTests=true"

        - publish: "$(System.DefaultWorkingDirectory)/MottuFlow/target/*.jar"
          artifact: demo
          displayName: "Publicar artefato JAR"

# --------------------- Banco de Dados ---------------------
- stage: BancoDados
  dependsOn: Build
  displayName: "Banco de Dados"
  jobs:
    - job: CriarMySQL
      steps:
        - task: AzureCLI@2
          name: CriarMySQL
          displayName: "Provisionar MySQL no ACI"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              set -e
              echo "Iniciando provisionamento do MySQL..."
              echo "Verificando Resource Group: $RESOURCE_GROUP"
              az group show -n $RESOURCE_GROUP >/dev/null 2>&1 || \
              az group create -n $RESOURCE_GROUP -l $LOCATION

              echo "Verificando se o container MySQL já existe..."
              if ! az container show -g $RESOURCE_GROUP -n $ACI_NAME >/dev/null 2>&1; then
                echo "Container não encontrado. Criando novo container MySQL..."
                az container create \
                  -g $RESOURCE_GROUP \
                  -n $ACI_NAME \
                  --image $CONTAINER_IMAGE \
                  --ports 3306 \
                  --cpu 1 --memory 1.5 \
                  --os-type Linux \
                  --ip-address public \
                  --restart-policy Always \
                  --environment-variables \
                    MYSQL_ROOT_PASSWORD=$(DB_PASSWORD) \
                    MYSQL_DATABASE=$(DB_NAME) \
                    MYSQL_USER=$(DB_USER) \
                    MYSQL_PASSWORD=$(DB_PASSWORD)
              else
                echo "Container MySQL já existente. Pulando criação."
              fi

              echo "Aguardando IP público do container..."
              for i in {1..60}; do
                DB_IP=$(az container show -g $RESOURCE_GROUP -n $ACI_NAME --query ipAddress.ip -o tsv)
                if [ -n "$DB_IP" ]; then
                  echo "IP obtido: $DB_IP"
                  break
                fi
                echo "Aguardando... ($i/60)"
                sleep 5
              done

              if [ -z "$DB_IP" ]; then
                echo "Erro: não foi possível obter IP do container MySQL."
                exit 1
              fi

              echo "Validando conectividade na porta 3306..."
              for i in {1..30}; do
                nc -z -w 3 $DB_IP 3306 && echo "Conexão MySQL OK" && break
                echo "Tentativa $i/30 - aguardando MySQL responder..."
                sleep 5
              done

              echo "MySQL pronto e acessível em $DB_IP:3306"
              echo "##vso[task.setvariable variable=DB_IP;isOutput=true]$DB_IP"
              echo "Variável DB_IP exportada para o próximo estágio."

# --------------------- Deploy ---------------------
- stage: Deploy
  dependsOn: BancoDados
  variables:
    DB_IP: $[ stageDependencies.BancoDados.CriarMySQL.outputs['CriarMySQL.DB_IP'] ]
  displayName: "Deploy"
  jobs:
    - job: DeployApp
      steps:
        - checkout: none

        - task: AzureCLI@2
          displayName: "Configurar WebApp e Variáveis"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              set -e
              echo "Iniciando configuração do WebApp..."
              echo "DB_IP recebida: $(DB_IP)"
              echo "Resource Group: $(RESOURCE_GROUP)"
              echo "WebApp: $(WEBAPP_NAME)"
              echo "Plano: $(APP_PLAN)"

              echo "Verificando plano de serviço..."
              az appservice plan show -n $(APP_PLAN) -g $(RESOURCE_GROUP) >/dev/null 2>&1 || \
              az appservice plan create -n $(APP_PLAN) -g $(RESOURCE_GROUP) --sku B1 --is-linux -l $(LOCATION)

              echo "Verificando aplicação web..."
              if ! az webapp show -n $(WEBAPP_NAME) -g $(RESOURCE_GROUP) >/dev/null 2>&1; then
                echo "Criando nova aplicação web..."
                az webapp create -n $(WEBAPP_NAME) -g $(RESOURCE_GROUP) -p $(APP_PLAN) --runtime "JAVA|21-java21"
              else
                echo "Aplicação já existe. Atualizando variáveis..."
              fi

              echo "Aplicando variáveis de ambiente..."
              az webapp config appsettings set \
                -n $(WEBAPP_NAME) \
                -g $(RESOURCE_GROUP) \
                --settings \
                  DB_HOST="$(DB_IP)" \
                  DB_PORT="3306" \
                  DB_NAME="$(DB_NAME)" \
                  DB_USER="$(DB_USER)" \
                  DB_PASSWORD="$(DB_PASSWORD)" \
                  JAVA_OPTS="-Xmx768M -Xms512M -XX:+TieredCompilation -XX:TieredStopAtLevel=4" \
                  SERVER_COMPRESSION_ENABLED="true"

              echo "Configuração de ambiente concluída com sucesso."
              echo "Listando variáveis configuradas:"
              az webapp config appsettings list -n $(WEBAPP_NAME) -g $(RESOURCE_GROUP)

        - download: current
          artifact: demo

        - task: AzureWebApp@1
          displayName: "Implantar JAR no WebApp"
          inputs:
            azureSubscription: "mottuflow-connection"
            appType: "webAppLinux"
            appName: "$(WEBAPP_NAME)"
            package: "$(Pipeline.Workspace)/demo/*.jar"
            deploymentMethod: runFromPackage
