trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: mottuflow-secrets
  - name: RESOURCE_GROUP
    value: "sprint-mottuflow"
  - name: WEBAPP_NAME
    value: "mottuflow-app"
  - name: APP_PLAN
    value: "mottuflow-plan"
  - name: LOCATION
    value: "brazilsouth"
  - name: ACI_NAME
    value: "mottuflow-db"
  - name: CONTAINER_IMAGE
    value: "mysql:8.0.34"

stages:

# --------------------- Construção ---------------------
- stage: Construcao
  displayName: "Estágio de Construção"
  jobs:
    - job: Construir
      displayName: "Construir Aplicação"
      container: maven:3.9.11-eclipse-temurin-21-noble
      steps:
        - checkout: self

        - task: Maven@4
          displayName: "Build com Maven"
          inputs:
            mavenPomFile: "MottuFlow/pom.xml"
            goals: "clean package -DskipTests=true"
            publishJUnitResults: true
            testResultsFiles: "**/surefire-reports/TEST-*.xml"

        - task: CopyFiles@2
          displayName: "Copiar JAR para artefato"
          inputs:
            SourceFolder: "$(System.DefaultWorkingDirectory)/MottuFlow/target"
            Contents: "*.jar"
            TargetFolder: "$(Build.ArtifactStagingDirectory)"

        - publish: $(Build.ArtifactStagingDirectory)
          artifact: demo
          displayName: "Publicar artefato"

# --------------------- Banco de Dados ---------------------
- stage: BancoDados
  displayName: "Estágio de Provisionamento do Banco de Dados"
  dependsOn: Construcao
  jobs:
    - job: CriarMySQL
      displayName: "Criar Container MySQL"
      steps:
        - checkout: self

        - task: AzureCLI@2
          displayName: "Provisionar MySQL no ACI"
          name: ProvisarMySQL
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              set -e

              DB_USER=$(DB_USER)
              DB_PASSWORD=$(DB_PASSWORD)
              DB_NAME=$(DB_NAME)

              DOCKER_USER=$(DOCKERHUB_USER)
              DOCKER_PASS=$(DOCKERHUB_PASSWORD)

              echo "Criando resource group..."
              az group show --name $RESOURCE_GROUP >/dev/null 2>&1 || \
              az group create --name $RESOURCE_GROUP --location $LOCATION

              echo "Verificando container MySQL..."
              if ! az container show --resource-group $RESOURCE_GROUP --name $ACI_NAME >/dev/null 2>&1; then
                echo "Criando container MySQL..."
                
                az container create \
              --resource-group $RESOURCE_GROUP \
              --name $ACI_NAME \
              --image $CONTAINER_IMAGE \
              --ports 3306 \
              --os-type Linux \
              --cpu 1 --memory 1.5 \
              --dns-name-label "${ACI_NAME}-dns-${BUILD_BUILDID}" \
              --ip-address public \
              --environment-variables MYSQL_ROOT_PASSWORD="$DB_PASSWORD" MYSQL_DATABASE="$DB_NAME" MYSQL_USER="$DB_USER" MYSQL_PASSWORD="$DB_PASSWORD" \
              --restart-policy Always \
              --registry-login-server index.docker.io \
              --registry-username $DOCKER_USER \
              --registry-password $DOCKER_PASS
              fi

              echo "Aguardando MySQL ficar disponível..."
              TIMEOUT=300
              ELAPSED=0
              DB_IP=""

              while [ -z "$DB_IP" ] && [ $ELAPSED -lt $TIMEOUT ]; do
                DB_IP=$(az container show --resource-group $RESOURCE_GROUP --name $ACI_NAME --query ipAddress.ip -o tsv 2>/dev/null || echo "")
                if [ -z "$DB_IP" ]; then
                  sleep 5
                  ELAPSED=$((ELAPSED + 5))
                  echo "Aguardando IP... ($ELAPSED/$TIMEOUT segundos)"
                fi
              done

              if [ -z "$DB_IP" ]; then
                echo "Erro: Timeout ao aguardar IP do MySQL"
                exit 1
              fi

              echo "IP obtido: $DB_IP"

              echo "Validando conectividade com MySQL em $DB_IP..."
              RETRY=0
              while ! nc -z -w 5 $DB_IP 3306 2>/dev/null && [ $RETRY -lt 60 ]; do
                echo "Tentativa $((RETRY + 1))/60 - MySQL não está respondendo ainda..."
                sleep 5
                RETRY=$((RETRY + 1))
              done

              if [ $RETRY -eq 60 ]; then
                echo "Erro: MySQL não respondeu após 5 minutos"
                exit 1
              fi

              echo "MySQL pronto em $DB_IP:3306"
              
              # Exportar variável para próximos jobs
              echo "##vso[task.setvariable variable=DB_IP;isOutput=true]$DB_IP"
              echo "DB_IP setada como output: $DB_IP"

# --------------------- Implantação ---------------------
- stage: Implantacao
  displayName: "Estágio de Implantação"
  dependsOn: BancoDados
  variables:
    DB_IP: $[ stageDependencies.BancoDados.CriarMySQL.outputs['ProvisarMySQL.DB_IP'] ]
  jobs:
    - job: ImplantarAplicacao
      displayName: "Implantar Aplicação Web"
      steps:
        - checkout: self

        - task: AzureCLI@2
          displayName: "Validar DB_IP"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              echo "Validando DB_IP recebida: $(DB_IP)"
              if [ -z "$(DB_IP)" ]; then
                echo "Erro: DB_IP está vazia!"
                exit 1
              fi
              echo "DB_IP validada com sucesso: $(DB_IP)"

        - task: AzureCLI@2
          displayName: "Criar Plano e Aplicação Web com Variáveis"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              set -e

              DB_IP_VALUE=$(DB_IP)
              echo "DB_IP recebida: $DB_IP_VALUE"
              
              if [ -z "$DB_IP_VALUE" ]; then
                echo "Recuperando DB_IP do ACI..."
                DB_IP_VALUE=$(az container show --resource-group $(RESOURCE_GROUP) --name $(ACI_NAME) --query ipAddress.ip -o tsv)
                echo "DB_IP recuperada: $DB_IP_VALUE"
              fi

              if [ -z "$DB_IP_VALUE" ]; then
                echo "Erro crítico: Não foi possível obter DB_IP"
                exit 1
              fi

              echo "Verificando plano de serviço..."
              az appservice plan show --name $(APP_PLAN) --resource-group $(RESOURCE_GROUP) >/dev/null 2>&1 || \
              az appservice plan create --name $(APP_PLAN) --resource-group $(RESOURCE_GROUP) --sku B1 --is-linux --location $(LOCATION)

              echo "Verificando aplicação web..."
              if ! az webapp show --name $(WEBAPP_NAME) --resource-group $(RESOURCE_GROUP) >/dev/null 2>&1; then
                echo "Criando aplicação web com variáveis de ambiente..."
                az webapp create --name $(WEBAPP_NAME) --resource-group $(RESOURCE_GROUP) --plan $(APP_PLAN) --runtime "JAVA|21-java21"
                
                echo "Configurando variáveis de ambiente na criação..."
                az webapp config appsettings set \
                  --name $(WEBAPP_NAME) \
                  --resource-group $(RESOURCE_GROUP) \
                  --settings \
                    DB_HOST="$DB_IP_VALUE" \
                    DB_PORT="3306" \
                    DB_NAME="$(DB_NAME)" \
                    DB_USER="$(DB_USER)" \
                    DB_PASSWORD="$(DB_PASSWORD)"
                
                echo "Variáveis configuradas na criação!"
              else
                echo "Webapp já existe, atualizando variáveis de ambiente..."
                az webapp config appsettings set \
                  --name $(WEBAPP_NAME) \
                  --resource-group $(RESOURCE_GROUP) \
                  --settings \
                    DB_HOST="$DB_IP_VALUE" \
                    DB_PORT="3306" \
                    DB_NAME="$(DB_NAME)" \
                    DB_USER="$(DB_USER)" \
                    DB_PASSWORD="$(DB_PASSWORD)"
              fi
              
              echo "Confirmando variáveis configuradas:"
              az webapp config appsettings list --name $(WEBAPP_NAME) --resource-group $(RESOURCE_GROUP)
              
              echo ""
              echo "Variáveis configuradas com sucesso!"
              echo "DB_HOST: $DB_IP_VALUE"
              echo "DB_PORT: 3306"
              echo "DB_NAME: $(DB_NAME)"
              echo "DB_USER: $(DB_USER)"

        - task: DownloadBuildArtifacts@1
          displayName: "Baixar Artefato da Construção"
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'demo'
            downloadPath: '$(Pipeline.Workspace)/demo'

        - task: AzureCLI@2
          displayName: "Validar Conectividade MySQL antes de Implantar"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              DB_IP_VALUE=$(DB_IP)
              DB_USER=$(DB_USER)
              DB_PASSWORD=$(DB_PASSWORD)
              DB_NAME=$(DB_NAME)
              
              echo "Testando conexão com MySQL em $DB_IP_VALUE:3306"
              echo "Usuário: $DB_USER"
              echo "Banco: $DB_NAME"
              
              # Instalar mysql-client se necessário
              apt-get update -qq && apt-get install -y -qq mysql-client >/dev/null 2>&1
              
              # Testar conexão
              RETRY=0
              while [ $RETRY -lt 30 ]; do
                if mysql -h "$DB_IP_VALUE" -u "$DB_USER" -p"$DB_PASSWORD" -D "$DB_NAME" -e "SELECT 1" >/dev/null 2>&1; then
                  echo "✓ Conexão com MySQL bem-sucedida!"
                  exit 0
                fi
                RETRY=$((RETRY + 1))
                echo "Tentativa $RETRY/30 - Aguardando MySQL..."
                sleep 5
              done
              
              echo "✗ Aviso: MySQL não respondeu após 150 segundos, mas continuando deployment"
              exit 0

        - task: AzureWebApp@1
          displayName: "Implantar Arquivo JAR"
          inputs:
            azureSubscription: "mottuflow-connection"
            appType: "webAppLinux"
            appName: "$(WEBAPP_NAME)"
            package: $(Pipeline.Workspace)/demo/*.jar

        - task: AzureCLI@2
          displayName: "Debug - Listar Variáveis de Ambiente"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              echo "=========================================="
              echo "Variáveis de ambiente do App Service:"
              echo "=========================================="
              az webapp config appsettings list --name $(WEBAPP_NAME) --resource-group $(RESOURCE_GROUP) --output table
              echo ""

        - task: AzureCLI@2
          displayName: "Validar Implantação"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              echo "Aguardando aplicação inicializar (90 segundos)..."
              sleep 90

              APP_URL="https://$(WEBAPP_NAME).azurewebsites.net"
              echo "Verificando saúde da aplicação em $APP_URL"

              for i in {1..20}; do
                HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL || echo "000")
                if [ "$HTTP_CODE" = "200" ]; then
                  echo "✓ Aplicação respondendo com status $HTTP_CODE"
                  exit 0
                fi
                echo "Tentativa $i/20 - Status: $HTTP_CODE"
                sleep 10
              done

              echo ""
              echo "⚠ Aplicação não respondeu com status 200"
              echo "Verificando logs para diagnóstico..."
              echo "=========================================="
              az webapp log tail --name $(WEBAPP_NAME) --resource-group $(RESOURCE_GROUP) --tail 150