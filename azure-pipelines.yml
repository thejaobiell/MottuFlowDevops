trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: mottuflow-secrets
  - name: RESOURCE_GROUP
    value: "sprint-mottuflow"
  - name: LOCATION
    value: "brazilsouth"
  - name: ACI_NAME
    value: "mottuflow-db"
  - name: ACI_APP_NAME
    value: "mottuflow-container-app"
  - name: CONTAINER_IMAGE
    value: "mysql:8.0.34"
  - name: DOCKER_REGISTRY
    value: "index.docker.io"
  - name: DOCKER_IMAGE_NAME
    value: "$(DOCKERHUB_USER)/mottuflow-app"
  - name: DOCKER_IMAGE_TAG
    value: "$(Build.BuildId)"

stages:

# --------------------- Banco de Dados ---------------------
- stage: BancoDados
  displayName: "Est√°gio de Provisionamento do Banco de Dados"
  jobs:
    - job: CriarMySQL
      displayName: "Criar Container MySQL"
      steps:
        - checkout: self

        - task: AzureCLI@2
          displayName: "Provisionar MySQL no ACI"
          name: ProvisarMySQL
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              set -e

              DB_USER=$(DB_USER)
              DB_PASSWORD=$(DB_PASSWORD)
              DB_NAME=$(DB_NAME)

              DOCKER_USER=$(DOCKERHUB_USER)
              DOCKER_PASS=$(DOCKERHUB_PASSWORD)

              echo "Criando resource group..."
              az group show --name $RESOURCE_GROUP >/dev/null 2>&1 || \
              az group create --name $RESOURCE_GROUP --location $LOCATION

              echo "Verificando container MySQL..."
              if ! az container show --resource-group $RESOURCE_GROUP --name $ACI_NAME >/dev/null 2>&1; then
                echo "Criando container MySQL..."
                
                az container create \
              --resource-group $RESOURCE_GROUP \
              --name $ACI_NAME \
              --image $CONTAINER_IMAGE \
              --ports 3306 \
              --os-type Linux \
              --cpu 1 --memory 1.5 \
              --dns-name-label "${ACI_NAME}-dns-${BUILD_BUILDID}" \
              --ip-address public \
              --environment-variables MYSQL_ROOT_PASSWORD="$DB_PASSWORD" MYSQL_DATABASE="$DB_NAME" MYSQL_USER="$DB_USER" MYSQL_PASSWORD="$DB_PASSWORD" \
              --restart-policy Always \
              --registry-login-server index.docker.io \
              --registry-username $DOCKER_USER \
              --registry-password $DOCKER_PASS
              fi

              echo "Aguardando MySQL ficar dispon√≠vel..."
              TIMEOUT=300
              ELAPSED=0
              DB_IP=""

              while [ -z "$DB_IP" ] && [ $ELAPSED -lt $TIMEOUT ]; do
                DB_IP=$(az container show --resource-group $RESOURCE_GROUP --name $ACI_NAME --query ipAddress.ip -o tsv 2>/dev/null || echo "")
                if [ -z "$DB_IP" ]; then
                  sleep 5
                  ELAPSED=$((ELAPSED + 5))
                  echo "Aguardando IP... ($ELAPSED/$TIMEOUT segundos)"
                fi
              done

              if [ -z "$DB_IP" ]; then
                echo "Erro: Timeout ao aguardar IP do MySQL"
                exit 1
              fi

              echo "IP obtido: $DB_IP"

              echo "Validando conectividade com MySQL em $DB_IP..."
              RETRY=0
              while ! nc -z -w 5 $DB_IP 3306 2>/dev/null && [ $RETRY -lt 60 ]; do
                echo "Tentativa $((RETRY + 1))/60 - MySQL n√£o est√° respondendo ainda..."
                sleep 5
                RETRY=$((RETRY + 1))
              done

              if [ $RETRY -eq 60 ]; then
                echo "Erro: MySQL n√£o respondeu ap√≥s 5 minutos"
                exit 1
              fi

              echo "MySQL pronto em $DB_IP:3306"
              
              echo "##vso[task.setvariable variable=DB_IP;isOutput=true]$DB_IP"
              echo "DB_IP setada como output: $DB_IP"

# --------------------- Build e Testes ---------------------
- stage: BuildAndTest
  displayName: "Build e Testes"
  dependsOn: BancoDados
  variables:
    DB_IP: $[ stageDependencies.BancoDados.CriarMySQL.outputs['ProvisarMySQL.DB_IP'] ]
  jobs:
    - job: BuildTestApp
      displayName: "Build e Testes da Aplica√ß√£o"
      steps:
        - checkout: self

        - task: JavaToolInstaller@0
          displayName: "Instalar Java 21"
          inputs:
            versionSpec: "21"
            jdkArchitectureOption: "x64"
            jdkSourceOption: "PreInstalled"

        - task: AzureCLI@2
          displayName: "Obter IP do MySQL"
          name: GetDBIP
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              DB_IP=$(az container show --resource-group $(RESOURCE_GROUP) --name $(ACI_NAME) --query ipAddress.ip -o tsv)
              echo "DB_IP obtida: $DB_IP"
              echo "##vso[task.setvariable variable=DB_IP;isOutput=true]$DB_IP"

        - task: Maven@4
          displayName: "Build Maven com Testes"
          env:
            DB_HOST: $(GetDBIP.DB_IP)
            DB_PORT: "3306"
            DB_NAME: $(DB_NAME)
            DB_USER: $(DB_USER)
            DB_PASSWORD: $(DB_PASSWORD)
            SERVER_PORT: "8080"
          inputs:
            mavenPomFile: "MottuFlow/pom.xml"
            goals: "clean package -B"

        - task: CopyFiles@2
          displayName: "Copiar JAR para artefato"
          inputs:
            SourceFolder: "$(System.DefaultWorkingDirectory)/MottuFlow/target"
            Contents: "*.jar"
            TargetFolder: "$(Build.ArtifactStagingDirectory)"

        - publish: $(Build.ArtifactStagingDirectory)
          artifact: aplicacao
          displayName: "Publicar artefato JAR"

# --------------------- Build Docker e Push ---------------------
- stage: BuildDocker
  displayName: "Build Docker e Push"
  dependsOn: BuildAndTest
  jobs:
    - job: BuildPushDocker
      displayName: "Build e Push da Imagem Docker"
      steps:
        - checkout: self

        - task: Docker@2
          displayName: "Build Docker Image"
          inputs:
            command: build
            Dockerfile: "MottuFlow/Dockerfile"
            repository: "$(DOCKER_IMAGE_NAME)"
            tags: |
              $(DOCKER_IMAGE_TAG)
              latest
            arguments: "--build-arg BUILDKIT_INLINE_CACHE=1"

        - task: Docker@2
          displayName: "Login Docker Hub"
          inputs:
            command: login
            containerRegistry: dockerhubConnection

        - task: Docker@2
          displayName: "Push Docker Image"
          inputs:
            command: push
            repository: "$(DOCKER_IMAGE_NAME)"
            tags: |
              $(DOCKER_IMAGE_TAG)
              latest

# --------------------- Deploy em ACI ---------------------
- stage: Deploy
  dependsOn: 
    - BancoDados
    - BuildDocker
  displayName: "Deploy em Azure Container Instance"
  variables:
    DB_IP: $[ stageDependencies.BancoDados.CriarMySQL.outputs['ProvisarMySQL.DB_IP'] ]
  jobs:
    - job: DeployACI
      displayName: "Deployar Aplica√ß√£o em ACI"
      steps:
        - checkout: none

        - task: AzureCLI@2
          displayName: "Validar DB_IP"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              echo "Validando DB_IP recebida: $(DB_IP)"
              if [ -z "$(DB_IP)" ]; then
                echo "Erro: DB_IP est√° vazia!"
                exit 1
              fi
              echo "DB_IP validada com sucesso: $(DB_IP)"

        - task: AzureCLI@2
          displayName: "Deploy Aplica√ß√£o em ACI"
          inputs:
            azureSubscription: "mottuflow-connection"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              set -e

              DB_IP_VALUE=$(DB_IP)
              DOCKER_USER=$(DOCKERHUB_USER)
              DOCKER_PASS=$(DOCKERHUB_PASSWORD)
              DB_PASSWORD=$(DB_PASSWORD)

              echo "Iniciando deploy da aplica√ß√£o em ACI..."
              echo "DB_IP: $DB_IP_VALUE"
              echo "Imagem Docker: $(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)"

              az container delete \
                --resource-group $(RESOURCE_GROUP) \
                --name $(ACI_APP_NAME) \
                --yes >/dev/null 2>&1 || echo "Nenhum container anterior para remover"

              sleep 5

              az container create \
                --resource-group $(RESOURCE_GROUP) \
                --name $(ACI_APP_NAME) \
                --image "$(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)" \
                --ports 8080 \
                --os-type Linux \
                --cpu 1 --memory 1.5 \
                --dns-name-label "mottuflow-app" \
                --ip-address public \
                --environment-variables \
                  DB_HOST="$DB_IP_VALUE" \
                  DB_PORT="3306" \
                  DB_NAME="$(DB_NAME)" \
                  DB_USER="$(DB_USER)" \
                  DB_PASSWORD="$DB_PASSWORD" \
                  SERVER_PORT="8080" \
                --restart-policy Always \
                --registry-login-server $(DOCKER_REGISTRY) \
                --registry-username $DOCKER_USER \
                --registry-password $DOCKER_PASS

              echo "Aguardando container ficar pronto..."
              sleep 10

              APP_FQDN=$(az container show --resource-group $(RESOURCE_GROUP) --name $(ACI_APP_NAME) --query ipAddress.fqdn -o tsv)
              echo "‚úÖ Aplica√ß√£o deployada com sucesso!"
              echo "üåê URL: http://$APP_FQDN:8080"
              echo "##vso[task.setvariable variable=APP_URL]http://$APP_FQDN:8080"